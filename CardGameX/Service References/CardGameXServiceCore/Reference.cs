//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CardGameX.CardGameXServiceCore {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerTablePosition", Namespace="http://schemas.datacontract.org/2004/07/CardGameXServiceCore")]
    public enum PlayerTablePosition : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        South = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        West = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        East = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Notrh = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bid", Namespace="http://schemas.datacontract.org/2004/07/CardGameXServiceCore")]
    [System.SerializableAttribute()]
    public partial class Bid : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CardGameX.CardGameXServiceCore.BidName Bid_Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanBidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CardGameX.CardGameXServiceCore.BidName Bid_ {
            get {
                return this.Bid_Field;
            }
            set {
                if ((this.Bid_Field.Equals(value) != true)) {
                    this.Bid_Field = value;
                    this.RaisePropertyChanged("Bid_");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanBid {
            get {
                return this.CanBidField;
            }
            set {
                if ((this.CanBidField.Equals(value) != true)) {
                    this.CanBidField = value;
                    this.RaisePropertyChanged("CanBid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BidName", Namespace="http://schemas.datacontract.org/2004/07/CardGameXServiceCore")]
    public enum BidName : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        S7 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        C7 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        D7 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        H7 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NT7 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        S8 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        C8 = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        D8 = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        H8 = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NT8 = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        S9 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        C9 = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        D9 = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        H9 = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NT9 = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        S10 = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        C10 = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        D10 = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        H10 = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NT10 = 19,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CardGameXServiceCore.ICardGameService", CallbackContract=typeof(CardGameX.CardGameXServiceCore.ICardGameServiceCallback))]
    public interface ICardGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/Subscribe", ReplyAction="http://tempuri.org/ICardGameService/SubscribeResponse")]
        string Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/Subscribe", ReplyAction="http://tempuri.org/ICardGameService/SubscribeResponse")]
        System.Threading.Tasks.Task<string> SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/Unsubscribe")]
        void Unsubscribe(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/SendMessage")]
        void SendMessage(string clientId, string value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string clientId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/GetPlayerHand", ReplyAction="http://tempuri.org/ICardGameService/GetPlayerHandResponse")]
        string[] GetPlayerHand(string pName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/GetPlayerHand", ReplyAction="http://tempuri.org/ICardGameService/GetPlayerHandResponse")]
        System.Threading.Tasks.Task<string[]> GetPlayerHandAsync(string pName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/GetTalon", ReplyAction="http://tempuri.org/ICardGameService/GetTalonResponse")]
        string[] GetTalon();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/GetTalon", ReplyAction="http://tempuri.org/ICardGameService/GetTalonResponse")]
        System.Threading.Tasks.Task<string[]> GetTalonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/GetPlayerPosition", ReplyAction="http://tempuri.org/ICardGameService/GetPlayerPositionResponse")]
        CardGameX.CardGameXServiceCore.PlayerTablePosition GetPlayerPosition(string pName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/GetPlayerPosition", ReplyAction="http://tempuri.org/ICardGameService/GetPlayerPositionResponse")]
        System.Threading.Tasks.Task<CardGameX.CardGameXServiceCore.PlayerTablePosition> GetPlayerPositionAsync(string pName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/GetPlayerNames", ReplyAction="http://tempuri.org/ICardGameService/GetPlayerNamesResponse")]
        string[] GetPlayerNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/GetPlayerNames", ReplyAction="http://tempuri.org/ICardGameService/GetPlayerNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetPlayerNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/GetUri")]
        void GetUri(string clientId, string value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/GetUri")]
        System.Threading.Tasks.Task GetUriAsync(string clientId, string value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/ThrowCard")]
        void ThrowCard(string clientId, string cardUri);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/ThrowCard")]
        System.Threading.Tasks.Task ThrowCardAsync(string clientId, string cardUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/CheckPlayerCurrentTurn", ReplyAction="http://tempuri.org/ICardGameService/CheckPlayerCurrentTurnResponse")]
        bool CheckPlayerCurrentTurn(string pName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/CheckPlayerCurrentTurn", ReplyAction="http://tempuri.org/ICardGameService/CheckPlayerCurrentTurnResponse")]
        System.Threading.Tasks.Task<bool> CheckPlayerCurrentTurnAsync(string pName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/GetPlayerAvaliableBids", ReplyAction="http://tempuri.org/ICardGameService/GetPlayerAvaliableBidsResponse")]
        CardGameX.CardGameXServiceCore.Bid[] GetPlayerAvaliableBids(string pName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/GetPlayerAvaliableBids", ReplyAction="http://tempuri.org/ICardGameService/GetPlayerAvaliableBidsResponse")]
        System.Threading.Tasks.Task<CardGameX.CardGameXServiceCore.Bid[]> GetPlayerAvaliableBidsAsync(string pName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/Bidd")]
        void Bidd(string pName, string bid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/Bidd")]
        System.Threading.Tasks.Task BiddAsync(string pName, string bid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/HandleMessage")]
        void HandleMessage(string value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/HandleUri")]
        void HandleUri(string uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardGameService/Connected", ReplyAction="http://tempuri.org/ICardGameService/ConnectedResponse")]
        void Connected(int i);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/HandleCardUri")]
        void HandleCardUri(CardGameX.CardGameXServiceCore.PlayerTablePosition playerPosition, string cardUri);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/TurnEnds")]
        void TurnEnds(CardGameX.CardGameXServiceCore.PlayerTablePosition bookedPlayerPosition, int numberOfBooks);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardGameService/PlayerBids")]
        void PlayerBids(CardGameX.CardGameXServiceCore.BidName bid, CardGameX.CardGameXServiceCore.Bid[] bids, CardGameX.CardGameXServiceCore.PlayerTablePosition position);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardGameServiceChannel : CardGameX.CardGameXServiceCore.ICardGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CardGameServiceClient : System.ServiceModel.DuplexClientBase<CardGameX.CardGameXServiceCore.ICardGameService>, CardGameX.CardGameXServiceCore.ICardGameService {
        
        public CardGameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CardGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CardGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CardGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CardGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string Subscribe() {
            return base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task<string> SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe(string clientId) {
            base.Channel.Unsubscribe(clientId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(string clientId) {
            return base.Channel.UnsubscribeAsync(clientId);
        }
        
        public void SendMessage(string clientId, string value) {
            base.Channel.SendMessage(clientId, value);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string clientId, string value) {
            return base.Channel.SendMessageAsync(clientId, value);
        }
        
        public string[] GetPlayerHand(string pName) {
            return base.Channel.GetPlayerHand(pName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPlayerHandAsync(string pName) {
            return base.Channel.GetPlayerHandAsync(pName);
        }
        
        public string[] GetTalon() {
            return base.Channel.GetTalon();
        }
        
        public System.Threading.Tasks.Task<string[]> GetTalonAsync() {
            return base.Channel.GetTalonAsync();
        }
        
        public CardGameX.CardGameXServiceCore.PlayerTablePosition GetPlayerPosition(string pName) {
            return base.Channel.GetPlayerPosition(pName);
        }
        
        public System.Threading.Tasks.Task<CardGameX.CardGameXServiceCore.PlayerTablePosition> GetPlayerPositionAsync(string pName) {
            return base.Channel.GetPlayerPositionAsync(pName);
        }
        
        public string[] GetPlayerNames() {
            return base.Channel.GetPlayerNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetPlayerNamesAsync() {
            return base.Channel.GetPlayerNamesAsync();
        }
        
        public void GetUri(string clientId, string value) {
            base.Channel.GetUri(clientId, value);
        }
        
        public System.Threading.Tasks.Task GetUriAsync(string clientId, string value) {
            return base.Channel.GetUriAsync(clientId, value);
        }
        
        public void ThrowCard(string clientId, string cardUri) {
            base.Channel.ThrowCard(clientId, cardUri);
        }
        
        public System.Threading.Tasks.Task ThrowCardAsync(string clientId, string cardUri) {
            return base.Channel.ThrowCardAsync(clientId, cardUri);
        }
        
        public bool CheckPlayerCurrentTurn(string pName) {
            return base.Channel.CheckPlayerCurrentTurn(pName);
        }
        
        public System.Threading.Tasks.Task<bool> CheckPlayerCurrentTurnAsync(string pName) {
            return base.Channel.CheckPlayerCurrentTurnAsync(pName);
        }
        
        public CardGameX.CardGameXServiceCore.Bid[] GetPlayerAvaliableBids(string pName) {
            return base.Channel.GetPlayerAvaliableBids(pName);
        }
        
        public System.Threading.Tasks.Task<CardGameX.CardGameXServiceCore.Bid[]> GetPlayerAvaliableBidsAsync(string pName) {
            return base.Channel.GetPlayerAvaliableBidsAsync(pName);
        }
        
        public void Bidd(string pName, string bid) {
            base.Channel.Bidd(pName, bid);
        }
        
        public System.Threading.Tasks.Task BiddAsync(string pName, string bid) {
            return base.Channel.BiddAsync(pName, bid);
        }
    }
}
